import  { useState, useEffect, useCallback } from 'react';
// import { ChatMessage, AIModel, Parameters, PromptTemplate } from '../../types';
import { useLocalStorage, useMediaQuery } from '../../hooks';
import { mockModels, mockTemplates } from '../../data/mockData';
import { Sidebar } from '../Sidebar';
import { ChatHeader } from '../ChatHeader';
import { ChatArea } from '../ChatArea';
import { InputArea } from '../InputArea';
import { TemplateLibrary } from '../TemplateLibrary';
import type { AIModel, ChatMessage, Parameters, PromptTemplate } from '../../types';

export default function AIInterface() {
  const [selectedModel, setSelectedModel] = useState<AIModel>(mockModels[0]);
  const [prompt, setPrompt] = useState('');
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [parameters, setParameters] = useLocalStorage<Parameters>('ai-parameters', {
    temperature: 0.7,
    maxTokens: 2048,
    topP: 1.0,
    frequencyPenalty: 0.0
  });
  const [isGenerating, setIsGenerating] = useState(false);
  const [showTemplates, setShowTemplates] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);

  // Responsive breakpoint detection
  const isMobile = useMediaQuery('(max-width: 1023px)');

  // Auto-close sidebar on mobile when screen becomes small
  useEffect(() => {
    if (!isMobile) {
      setSidebarOpen(true);
    } else {
      setSidebarOpen(false);
    }
  }, [isMobile]);

  const simulateAIResponse = useCallback(async (userPrompt: string) => {
    setIsGenerating(true);
    
    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: userPrompt,
      timestamp: new Date()
    };
    setMessages(prev => [...prev, userMessage]);

    // Close sidebar on mobile after sending message
    if (isMobile) {
      setSidebarOpen(false);
    }

    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    const responses = [
      `I understand you're working with the ${selectedModel.name} model. This is a simulated response that would be generated based on your prompt and the parameters you've set (temperature: ${parameters.temperature}, max tokens: ${parameters.maxTokens}).`,
      `Thank you for your question! In a real implementation, this response would be generated by ${selectedModel.name} using your specified parameters. The temperature setting of ${parameters.temperature} would affect the creativity of the response.`,
      `Based on your prompt and the ${selectedModel.name} model configuration, here's what the AI would generate. Your parameter settings (temperature: ${parameters.temperature}, top-p: ${parameters.topP}) influence the response style and diversity.`,
      `This is a demonstration response from ${selectedModel.name}. The model would process your input considering the current parameter configuration and generate contextually relevant content based on its training.`
    ];

    const assistantMessage: ChatMessage = {
      id: (Date.now() + 1).toString(),
      role: 'assistant',
      content: responses[Math.floor(Math.random() * responses.length)],
      timestamp: new Date()
    };
    
    setMessages(prev => [...prev, assistantMessage]);
    setIsGenerating(false);
  }, [selectedModel, parameters, isMobile]);

  const handleSend = () => {
    if (!prompt.trim() || isGenerating) return;
    simulateAIResponse(prompt);
    setPrompt('');
  };

  const clearChat = () => {
    setMessages([]);
  };

  const exportChat = () => {
    const chatData = {
      model: selectedModel.name,
      parameters,
      messages,
      exportedAt: new Date().toISOString()
    };
    const blob = new Blob([JSON.stringify(chatData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-chat-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleCopyMessage = (content: string) => {
    // Optional: Add toast notification here
    console.log('Message copied:', content);
  };

  const handleExportMessage = (content: string) => {
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `message-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleTemplateSelect = (template: PromptTemplate) => {
    setPrompt(template.content);
    setShowTemplates(false);
  };

  return (
    <div className="min-h-screen transition-colors duration-200">
      <div className="flex h-screen bg-white dark:bg-slate-900 overflow-hidden">
        <Sidebar
          isOpen={sidebarOpen}
          onToggle={() => setSidebarOpen(!sidebarOpen)}
          selectedModel={selectedModel}
          onModelChange={setSelectedModel}
          parameters={parameters}
          onParametersChange={setParameters}
          isMobile={isMobile}
        />

        <div className="flex-1 flex flex-col min-w-0">
          <ChatHeader
            modelName={selectedModel.name}
            onOpenTemplates={() => setShowTemplates(true)}
            onClearChat={clearChat}
            onExportChat={exportChat}
            onOpenSidebar={() => setSidebarOpen(true)}
            messageCount={messages.length}
          />

          <ChatArea
            messages={messages}
            isGenerating={isGenerating}
            modelName={selectedModel.name}
            onOpenTemplates={() => setShowTemplates(true)}
            onCopyMessage={handleCopyMessage}
            onExportMessage={handleExportMessage}
          />

          <InputArea
            prompt={prompt}
            onPromptChange={setPrompt}
            onSend={handleSend}
            isGenerating={isGenerating}
            selectedModel={selectedModel}
            parameters={parameters}
          />
        </div>

        <TemplateLibrary
          templates={mockTemplates}
          onTemplateSelect={handleTemplateSelect}
          isOpen={showTemplates}
          onClose={() => setShowTemplates(false)}
        />
      </div>
    </div>
  );
}